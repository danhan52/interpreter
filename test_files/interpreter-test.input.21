;; returns a lazy list going from first to last
(define seq
  (lambda (first last)
    (if (> first last)
        #f
        (cons first
            (lambda () (seq (+ first 1) last))))))

;; returns a lazy list starting at first going on infinitely
(define inf-seq
  (lambda (first)
    (cons first
          (lambda () (inf-seq (+ first 1))))))
          

;; returns a normal list with the first n values of lazy-list
(define first-n
  (lambda (lazy-list n)
    (cond ((null? lazy-list) (quote ()))
          ((equal? n 0) (quote ()))
          ((equal? lazy-list #f) (quote ()))
          (else (cons (car lazy-list) (first-n ((cdr lazy-list)) (- n 1)))))))
          
(first-n (inf-seq 193) 12)
(first-n (seq 24 97) 9)

;; returns nth value of lazy-list or #f if there are less than n elements in the lazy-list
(define nth
  (lambda (lazy-list n)
    (cond ((null? lazy-list) #f)
          ((equal? lazy-list #f) #f)
          ((equal? n 1) (car lazy-list))
          (else (nth ((cdr lazy-list)) (- n 1))))))

(nth (seq 2 5) 7)
(nth (inf-seq 52) 708)

;; returns a new lazy list without multiples of n
(define filter-multiples
 (lambda (lazy-list n)
   (if (equal? lazy-list #f)
       #f
       (if (equal? (modulo (car lazy-list) n) 0)
           ((lambda () (filter-multiples ((cdr lazy-list)) n)))
           (cons (car lazy-list) (lambda () (filter-multiples ((cdr lazy-list)) n)))))))

;; helper function that does the "sieving." Prettier than defining it in the let
(define sieve-all
  (lambda (lazy-list)
    (cons (car lazy-list)
          (lambda () (sieve-all (filter-multiples ((cdr lazy-list)) (car lazy-list)))))))

;; returns all prime numbers
(define primes
  (lambda ()
    (let ((plist (inf-seq 2)))
      (sieve-all plist))))

(nth (primes) 24)
(first-n (primes) 13)